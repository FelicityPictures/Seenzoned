from random import choice

END_OF_SENTENCE_CHARS = ['.', '?', '!', '\n']

def get_dictionary(file_name):
    """
    get_dictionary: return the markov dictionary from the given file name

    Args:
        file_name (string): the relative path/name of the file upon which the
                            markov dictionary will be based.
    
    Returns:
        a dictionary of markov chain
    
    Example:
        get_dictionary("fellowship.txt") --> a markov chain dictionary based on
        the file "fellowship.txt"
    
    Raises:
        FileNotFoundError - if the function cannot find the specified file
        IOError - if the function cannot read the file
    """

    f = open(file_name, 'r').read().split('\n')

    markov = {}

    for i in f:
        words = i.split()
        if len(words) > 2:
            for j in range(0, len(words) - 2):
                first_word = words[j][0] + words[j][1:].lower()
                second_word = words[j+1][0] + words[j+1][1:].lower()
                third_word = words[j+2][0] + words[j+2][1:].lower()
                if (first_word, second_word) in markov:
                    markov[first_word, second_word].append(third_word)
                else:
                    markov[first_word, second_word] = [third_word]
            second_to_last = words[-2][0] + words[-2][1:].lower()
            last = words[-1][0] + words[-1][1:].lower()
            if (second_to_last, last) in markov:
                markov[second_to_last, last].append('\n')
            else:
                markov[second_to_last, last] = ['\n']
    return markov

def get_sentence(markov):
    """
    get_sentence: generate a sentence based on a markov-chain dictionary

    Args:
        markov (dictionary): the markov dictionary used

    Returns:
        a sentence (string) generated by the markov dictionary that starts on a
        capital letter.
    
    Example:
        get_sentence({("I", "am") : ["Yicheng"], ("am", "Yicheng") : ["\n"]})
        --> "I am Yicheng"
    """

    key = list(choice(markov.keys()))

    while key[0][0].islower() or key[0][-1] in END_OF_SENTENCE_CHARS or key[1][-1] in END_OF_SENTENCE_CHARS: # makes sure it starts on a capital string and not the end of a sentence
        key = list(choice(markov.keys()))

    value = choice(markov[key[0], key[1]])

    sentence = ""
    sentence += key[0] + " " + key[1]
    sentence += " " + value

    while (key[0], key[1]) in markov and value[-1] not in END_OF_SENTENCE_CHARS:
        key[0] = key[1]
        key[1] = value
        value = choice(markov[key[0], key[1]])
        sentence += " " + value

    if sentence[-1] == '\n':
        sentence = sentence[:-1]

    if sentence[-1] not in END_OF_SENTENCE_CHARS:
        sentence = sentence[:-1] + choice(END_OF_SENTENCE_CHARS[:-1])

    return sentence

if __name__ == '__main__':
    print get_sentence(get_dictionary("fellowship.txt"))
